@model HumanCapitalManagement.ViewModel.MainVM.vPersonnelAP_obj_save
@{
    ViewBag.Title = "HCM | Manage PR Edit";
    Layout = "~/Views/Shared/_LPMaster.cshtml";
}


<section class="content-header">
    <h1>
        Manage Candidate in PR
    </h1>
</section>
<!-- Main content -->
<section class="content">
    <form class="form-horizontal">
        <div id="divContent">
            <div class="row">
                <div class="col-lg-12">
                    <div class="box box-solid box-ctmPR3">

                        <!-- /.box-header -->
                        <!-- form start -->
                        <div class="box-body ">
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="table-responsive">
                                        <table class="table table-striped table-bordered table-hover display" id="gvwDataCandidate" width="100%">
                                            <thead>
                                            </thead>
                                            <tbody></tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>

                        </div>
                        <!-- /.box-body -->
                        <div class="box-footer">
                            <div class="row">
                                <div class="col-md-12 text-center">
                                    @*<button type="button" class="btn btn-primary" onclick="Save();">Save</button>
                                        <button type="button" class="btn btn-warning" onclick="Cancel();">Back</button>*@
                                </div>
                            </div>

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </form>
    @*<%--[modal] before Add--%>*@
    <div id="PopupSave" class="modal fade" tabindex="-1" role="dialog">
        <div class="modal-dialog  widthPOP">
            <div class="modal-content">
                <div class="modal-header" style="background-color: #337ab7;">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <span class="modal-title"><b style="color: white;">Saving Confirmation</b></span>
                </div>
                <div class="modal-body">
                    <div id="divCreatePopUp">
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <label class="col-md-12 text-center">Do you want to save?</label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button id="btnOK" type="button" onclick="SaveData()" class="btn btn-primary">Yes</button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>
    <div id="PopupEdit" class="modal fade" tabindex="-1" role="dialog">
        <div class="modal-dialog  widthPOP">
            <div class="modal-content">
                <div class="modal-header" style="background-color: #337ab7;">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <span class="modal-title"><b style="color: white;">Saving Confirmation</b></span>
                </div>
                <div class="modal-body">
                    <div id="divCreatePopUp">
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <label class="col-md-4 control-label text-right required">New PR No.</label>
                                    <div class="col-md-8">
                                        <input type="text" id="txtnewprno" name="txtnewprno" class="form-control" data-bind="value : pr_ref_no , valueUpdate: 'afterkeydown'" />
                                        <input type="text" id="txtids" name="txtids" class="form-control" style="display:none;" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button id="btnOK" type="button" onclick="SaveData()" class="btn btn-primary">Yes</button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>
</section>
@section style{

    <link href="~/Scripts/plugins/bootstrapValidate/dist/css/bootstrapValidator.css" rel="stylesheet" />
    <style>

        td.details-control {
            background: url('@Url.Content("~/Image/details_open.png")') no-repeat center center;
            cursor: pointer;
        }

        tr.details td.details-control {
            background: url('@Url.Content("~/Image/details_close.png")') no-repeat center center;
        }
           .can-inactive {
     text-decoration: line-through;
        }
    </style>
}

@section scripts{
    <script src="~/Scripts/plugins/bootstrapValidate/dist/js/bootstrapValidator.js"></script>
    <script src="~/Scripts/plugins/knockout-3.4.2.js"></script>
    <script src="~/Scripts/plugins/knockout.mapping-latest.js"></script>
    <script src="~/Scripts/plugins/jsLinq/linq.min.js"></script>
    <script src="~/Scripts/plugins/jsLinq/jquery.linq.min.js"></script>
    <script src="~/Scripts/plugins/jquery-inputmask/min/inputmask/inputmask.min.js"></script>
    <script src="~/Scripts/plugins/jquery-inputmask/min/inputmask/inputmask.numeric.extensions.min.js"></script>
    <script src="~/Scripts/plugins/jquery-inputmask/min/inputmask/jquery.inputmask.min.js"></script>
    @*Script for bind Data KnockOut*@

    <script type="text/javascript">
        var url = document.URL;
        function getParameterByName(name) {
            name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
            var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
                results = regex.exec(location.search);

            return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
        }
       var objModel = @Html.Raw(Json.Encode(Model));
       var sUrlBack = '@Url.Action("PRAdminList", "PRAdmin")';
       $(function () {
        @if (Request.QueryString["bUrl"] != null)
           {
       <text>
           sUrlBack += "?qryStr=" + '@Uri.EscapeDataString(Request.QueryString["bUrl"])';
       </text>
       }

        });

        function Edit(para)
        {
            $('#PopupEdit').modal();
            $('#txtids').val(para);
        }


    </script>

    <script type="text/javascript">
        var objMaxLength = [
            { ctrlID: "txtremark", ctrlType: "area", MaxLength: 1000 }];
        $(function () {
            SetTableCandidate();
            BindData(objModel);
            ko.applyBindings(viewModel);
            InputMaskDecimal(GetInputByID("txtNoofHead"), 10, 0);
            $("select[id$=ddlPosition]").on("change", function () {
                ActionddlPosition($(this).val());

            });
            ValidateForm();

            $("input[id$=txtNoofHead]").on('change keyup paste', function () {
                var Val = $(this).val();
                if (Val = "") {
                    $('#divContent').bootstrapValidator('updateStatus', GetElementName("txtNoofHead", objControl.txtbox), "INVALID");
                }
                else {
                    $('#divContent').bootstrapValidator('revalidateField', GetElementName("txtNoofHead", objControl.txtbox));
                }
            });
        });
        function ValidateForm() {
            var objValidatePopUp = {};

            objValidatePopUp[GetElementName("txtNoofHead", objControl.txtbox)] = addValidate_notEmpty("This value is not valid");
            objValidatePopUp[GetElementName("ddlRank", objControl.dropdown)] = addValidate_notEmpty("This value is not valid");
            objValidatePopUp[GetElementName("ddlPosition", objControl.dropdown)] = addValidate_notEmpty("This value is not valid");
            objValidatePopUp[GetElementName("ddlStatus", objControl.dropdown)] = addValidate_notEmpty("This value is not valid");
            objValidatePopUp[GetElementName("txtDes", objControl.txtarea)] = addValidate_notEmpty("This value is not valid");
            BindValidateBootstrap("divContent", objValidatePopUp);
        }
    </script>
    @*Script for bind Data KnockOut*@
    <script type="text/javascript">
        var viewModel = {

        };
        function ViewModel() {
            var self = this;
            self.ReplaceUser = ko.computed(function () {
                if (objModel.replaced_user + "" == "Y") {
                    return true;
                }
                else {
                    return false;
                }
            });
            self.Subgroup = ko.computed(function () {
                if (objModel.sub_group + "" == "Y") {
                    return true;
                }
                else {
                    return false;
                }
            });
            //teve for fix bug
            self.TypeReqHasOpt = ko.observable(true);
            //end


            self.conditionChecked = ko.observable(false);
            self.loadCondition = function () {
                //ajax request to get condition value. Suppose ajax request returned value "used". so
                self.conditionChecked("used");
            }
            self.loadCondition();
            ko.bindingHandlers.iCheck = { // integrating icheck plugin using bh
                init: function (element, valueAccessor) {
                    var ctrl = $(element);
                    var sID = ctrl[0].id;
                    //initialize icheck to the element
                    $(element).iCheck({
                        radioClass: 'iradio_flat-green'
                    });
                    $(element).on('ifChecked', function (event) {

                        var observable = valueAccessor();
                        observable.checked(event.target.defaultValue); //assigning selected value
                    });
                },
                update: function (element, valueAccessor) {
                    var observable = valueAccessor();
                }
            };

        }
        function BindData(value) {
            if (viewModel.Id == undefined) {
                viewModel = ko.mapping.fromJS(value);
                ViewModel();
                $("input[id*=rdlStatus][value=" + value.active_status + "]").iCheck('check');

                if (objModel.lstCandidates != undefined && objModel.lstCandidates != null && objModel.lstCandidates.length > 0) {
                    $('#gvwDataCandidate').DataTable().clear().draw();
                    $('#gvwDataCandidate').dataTable().fnAddData(objModel.lstCandidates);
                    $('#gvwDataCandidate').dataTable().fnDraw();

                    setTimeout(function () {
                        $('#gvwDataCandidate').DataTable().columns.adjust().draw();
                        $('#gvwDataCandidate').DataTable().columns.adjust().responsive.recalc();
                    }, 500);
                }
                else {
                    $('#gvwDataCandidate').DataTable().clear().draw();
                    $('#gvwDataCandidate').dataTable().fnDraw();
                }
            }
            else {
                ko.mapping.fromJS(value, {}, viewModel);
                $("input[id*=rdlStatus][value=" + value.active_status + "]").iCheck('check');
            }
        }
        function Cancel() {
            window.location.href = sUrlBack;
        }

        function SetTableCandidate() {
            var objHeadClRequest = [
                { "title": "", "width": "5%", "className": "details-control", "searchable": false, "orderable": false, "data": "Id", },
                { "title": "No", "width": "5%", "className": "dt-center-ctm", "data": "Id", "searchable": false },
                { "title": "Name", "width": "15%", "className": "dt-left-ctm", "data": "candidate_name", "searchable": false },
                { "title": "Rank", "width": "10%", "className": "dt-center-ctm", "data": "rank", "searchable": false },
                { "title": "Status", "width": "10%", "className": "dt-center-ctm", "data": "candidate_status", "searchable": false },
                { "title": "Action Date", "width": "10%", "className": "dt-center-ctm", "data": "action_date", "searchable": false },
                { "title": "Remark", "width": "20%", "className": "dt-left-ctm", "data": "remark", "searchable": false },
                { "title": "HR Owner", "width": "15%", "className": "dt-left-ctm", "data": "owner_name", "searchable": false },
                { "title": "Active Status", "width": "10%", "className": "dt-center-ctm", "data": "active_status", "searchable": false },
                { "title": "Move", "width": "0%", "className": "dt-center-ctm", "data": "Edit", "searchable": false, },
            ];

            var objTableRe = {
                sTableID: "gvwDataCandidate",
                nDis: [],
                //sProperty: "<'top col-md-6'>rt<'bottom col-md-6'><'bottom col-md-6 text-right'><'clear'>",
                sProperty: "<'top col-md-6'l>rt<'bottom col-md-6'fi><'bottom col-md-6 text-right'p><'clear'>",//length pangging
                objHeadCl: objHeadClRequest,//Table Headder
                objDataSet: [], //dataset
                nHeadFix: 0,// fix clr
                EmptyTable: EmptyTable,
                order: [[1, "asc"]],
                objBeforeClRender: false,
                nRunningNumber: ["true", 1],
                columnDefs: [{
                    "targets": 2,
                    "render": function (data, type, row) {

                        return data;
                    }
                }
                ],
                fixedHeader: {
                    header: false,
                    footer: false
                },
                createdRow: function (row, data, index) {
                    if (data["active_status_id"] + "" != "Y") {
                        $('td', row).eq(2).addClass('can-inactive');
                    }
                }

            };

            var table = CreatTableJS(objTableRe);
            var detailRows = [];

            $('#gvwDataCandidate tbody').on('click', 'tr td.details-control', function () {
                var tr = $(this).closest('tr');
                var row = table.row(tr);
                var idx = $.inArray(tr.attr('id'), detailRows);

                if (row.child.isShown()) {
                    tr.removeClass('details');
                    row.child.hide();

                    // Remove from the 'open' array
                    detailRows.splice(idx, 1);
                }
                else {
                    tr.addClass('details');
                    row.child(format(row.data())).show();

                    // Add to the 'open' array
                    if (idx === -1) {
                        detailRows.push(tr.attr('id'));
                    }
                }
            });

            // On each draw, loop over the `detailRows` array and show any child rows
            table.on('draw', function () {
                $.each(detailRows, function (i, id) {
                    $('#' + id + ' td.details-control').trigger('click');
                });
            });
        }
        function format(d) {
            return 'Full name: ' + d.candidate_name + '<br>' +
                'Salary: ' + d.candidate_status;
        }
    </script>
    @if (Model.request_status + "" == "4")
    {


    }
    <script type="text/javascript">
       function Save() {
            var IsPass = false;

            var Check = GetValTextArea("txtDes");
           if (Check + "" != "" && CheckValidateBootstrap("divContent")) {
               IsPass = true;
            }
            else {
               FocusValidateBootstrap("divContent");
                DialogWarning("Process Result", "Please provide details why you are updating this PR?");
            }
            if (IsPass) {
                $("#PopupSave").modal();
            }

        }
        function SaveData() {
            var IsPass = true;
            if (IsPass) {
                $("#PopupSave").modal('hide');
              
                var Param = ko.toJS(viewModel);
                if ($('#txtnewprno').val().trim() !== '')
                {
                    BlockUI();
                    $.ajax({
                        dataType: AjaxCall.dataType,
                        type: AjaxCall.type,
                        contentType: AjaxCall.contentType,
                        url: '@Url.Action("SaveManagePREdit", "ManageTifAndPr")',
                        data: JSON.stringify({ id: $('#txtids').val(), pr_no: $('#txtnewprno').val() }),
                        success: function (respone) {
                            if (respone.result.Status == SysProcess.SessionExpired) {
                                PopupLogin('@Url.Action("Index", "Home")');
                            } else if (respone.result.Status == SysProcess.Success) {
                                DialogSuccessOk(DialogHeader.Info, DialogMsg.SaveComplete, 'func', function () {
                                    BlockUI();
                                    location.reload();

                                });
                            }
                            else if (respone.result.Status == SysProcess.Duplicate) {
                                DialogWarning(DialogHeader.Warning, respone.result.Msg);
                            }
                            else {
                                DialogWarning(DialogHeader.Warning, respone.result.Msg);
                            }
                        },
                        error: AjaxCall.error,
                        complete: function (jqXHR, status) {//finaly
                            UnblockUI();
                        }
                    });
                }
                 else {
                    DialogWarning(DialogHeader.Warning, 'Please input data.');
                    return false;
                    }
            }
        }
    </script>
    <script type="text/javascript">
        function ActionddlPosition(val) {
            var Param = val;
            if (Param != "") {
                $.ajax({
                    dataType: AjaxCall.dataType,
                    type: AjaxCall.type,
                    contentType: AjaxCall.contentType,
                    url: '@Url.Action("GetPosition", "PersonnelRequest")',
                    data: JSON.stringify({ SearchItem: Param }),
                    success: function (respone) {

                        if (respone != undefined) {
                            var newList = ko.toJS(viewModel);
                            if (newList.Id != undefined) {
                                newList.job_descriptions = respone.job_descriptions + '';
                                newList.qualification_experience = respone.qualification_experience + '';

                                BindData(newList);
                            }
                        }
                    },
                    error: AjaxCall.error,
                    complete: function (jqXHR, status) {//finaly
                        UnblockUI();
                    }
                });
            } else {
                var newList = ko.toJS(viewModel);
                if (newList.Id != undefined) {
                    newList.job_descriptions = '';
                    newList.qualification_experience = '';
                    BindData(newList);
                }
            }

        }
    </script>
}