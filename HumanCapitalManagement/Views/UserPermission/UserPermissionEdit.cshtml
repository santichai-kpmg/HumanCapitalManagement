@model HumanCapitalManagement.ViewModel.vUserPermiss_obj
@{
    ViewBag.Title = "HCM | Edit User Permission";
    Layout = "~/Views/Shared/_LPMaster.cshtml";
}




<section class="content-header">
    <h1>
        Edit User Permission
    </h1>
</section>

<!-- Main content -->
<section class="content">
    <form class="form-horizontal">
        <div id="divContent">
            <div class="row">
                <div class="col-md-12">
                    <!-- general form elements -->
                    <div class="box box-primary">
                        <div class="box-header with-border">
                            <h3 class="box-title">Detail</h3>
                        </div>
                        <!-- /.box-header -->
                        <!-- form start -->
                        <div class="box-body">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group form-group-sm">
                                        <label class="col-md-4 control-label text-right require">User ID</label>
                                        <div class="col-md-8">
                                            <input type="text" id="txtID" name="txtID" class="form-control hidden" data-bind='value: Id' disabled />
                                            <input type="text" id="txtSearch" name="txtSearch" class="form-control" disabled data-bind='value: user_no' />
                                        </div>
                                    </div>
                                </div>

                            </div>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group form-group-sm">
                                        <label class="col-md-4 control-label text-right nomallabel">User Name</label>
                                        <div class="col-md-8">
                                            <input type="text" id="txtName" name="txtName" class="form-control" data-bind='value: user_name' disabled />
                                        </div>
                                    </div>
                                </div>
                                @*<div class="col-md-6">
                                        <div class="form-group form-group-sm">
                                            <label class="col-md-4 control-label text-right require">User LastName</label>
                                            <div class="col-md-8">
                                                <input type="text" id="txtLname" name="txtLname" class="form-control" data-bind='value: user_last_name' disabled />
                                            </div>
                                        </div>
                                    </div>*@
                             
                            </div>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group form-group-sm">
                                        <label class="col-md-4 control-label text-right nomallabel">Group</label>
                                        <div class="col-md-8">
                                            <input type="t  ext" id="txtLname" name="txtLname" class="form-control" data-bind='value: unit_name' disabled />
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group form-group-sm">
                                        <label class="col-md-4 control-label text-right require">Group Permission</label>
                                        <div class="col-md-8">
                                            @{ Html.RenderAction("CreateGroupPermission", "HCMMasterData", new
                                                {
                                                    id = "ddlGroupPermission",
                                                    databind = "group_permiss_id",
                                                    value = ""
                                                });}
                                        </div>
                                    </div>
                                </div>

                            </div>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group form-group-sm">
                                        <label class="col-md-4 control-label text-right nomallabel">Special Note</label>
                                        <div class="col-md-8">
                                            <textarea rows="3" id="txtDes" cols="50" class="form-control" data-bind='value: description'></textarea>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group form-group-sm">
                                        <label class="col-md-4 control-label text-right require">Status</label>
                                        <div class="col-md-8">
                                            <label class="control-label">
                                                <input type="radio" name="Status" id="rdlStatus" class="flat-green radio radio-inline" data-bind='iCheck: { checked: active_status}' value="Y">Active<br>
                                            </label>
                                            <label class="control-label">
                                                <input type="radio" name="Status" id="rdlStatus" class="flat-green radio radio-inline" data-bind='iCheck: { checked: active_status}' value="N">Inactive<br>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <hr />
                        <div class="box-header with-border">
                            <h4 class="box-title">List Menu</h4>
                        </div>
                        <div class="box-body">
                            <div class="row" id="divTable">
                                <div class="col-md-6">
                                    <div class="box box-solid box-info">
                                        <div class="box-header with-border">
                                            <i class="fa fa-text-width"></i>
                                            <h3 class="box-title">Menu List Data</h3>
                                            <div class="box-tools pull-right">
                                                <button id="btnRefeshTable" type="button" class="btn btn-box-tool" onclick="RefreshTable(this)">
                                                    <i class="fa fa-refresh"></i>
                                                </button>
                                            </div>
                                        </div>
                                        <!-- /.box-header -->
                                        <div class="box-body">
                                            <div class="table-responsive">
                                                <table class="table table-striped table-bordered table-hover display" id="gvwData" width="100%">
                                                    <thead>
                                                    </thead>
                                                    <tbody></tbody>
                                                </table>
                                            </div>
                                        </div>

                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="box box-solid box-info">
                                        <div class="box-header with-border">
                                            <i class="fa fa-text-width"></i>
                                            <h3 class="box-title">Group List Data</h3>
                                        </div>
                                        <!-- /.box-header -->
                                        <div class="box-body">
                                            @{ Html.RenderAction("CreateGroupForSelectBox", "HCMMasterData", new
                                                {
                                                    id = "boxDivision",
                                                    avalue = Model.aUnitCode.ToArray(),
                                                });}
                                            @*<select id='pre-selected-options' multiple='multiple' class="form-control" >
                                                    <optgroup label='Friends'>
                                                        <option value='1'>Yoda</option>
                                                        <option value='2' selected disabled>Obiwan</option>
                                                    </optgroup>
                                                    <optgroup label='Enemies'>
                                                        <option value='3'>Palpatine</option>
                                                        <option value='4' disabled>Darth Vader</option>
                                                    </optgroup>
                                                </select>*@

                                        </div>
                                        <!-- /.box-body -->
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- /.box-body -->
                        <div class="box-footer">
                            <div class="row">
                                <div class="col-md-12 text-center">
                                    <button type="button" class="btn btn-primary" onclick="Save();">Save</button>
                                    <button type="button" class="btn btn-danger" onclick="Cancel();">Cancel</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </form>
    @*<%--[modal] before Add--%>*@
    <div id="PopupSave" class="modal fade" tabindex="-1" role="dialog">
        <div class="modal-dialog  widthPOP">
            <div class="modal-content">
                <div class="modal-header" style="background-color: #337ab7;">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <span class="modal-title"><b style="color: white;">Saving Confirmation</b></span>
                </div>
                <div class="modal-body">
                    <div id="divCreatePopUp">
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <div class="col-md-12 text-center">
                                        <label class="control-label" id="lblAccept"></label>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <label class="col-md-12 text-center">Do you want to save?</label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button id="btnOK" type="button" onclick="SaveData()" class="btn btn-primary">Yes</button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>
</section>
@section style{

    <link href="~/Scripts/plugins/bootstrapValidate/dist/css/bootstrapValidator.css" rel="stylesheet" />
    <link href="~/Scripts/plugins/lou-multi-select/css/multi-select.css" rel="stylesheet" />
    <style>
        .ms-container {
            width: 470px;
        }

            .ms-container .ms-list {
                height: 400px;
            }
    </style>
}

@section scripts{
    <script src="~/Scripts/plugins/bootstrapValidate/dist/js/bootstrapValidator.js"></script>
    <script src="~/Scripts/plugins/knockout-3.4.2.js"></script>
    <script src="~/Scripts/plugins/knockout.mapping-latest.js"></script>
    <script src="~/Scripts/plugins/jsLinq/linq.min.js"></script>
    <script src="~/Scripts/plugins/jsLinq/jquery.linq.min.js"></script>
    <script src="~/Scripts/plugins/lou-multi-select/js/jquery.multi-select.js"></script>
    <script type="text/javascript">
        var url = document.URL;
        function getParameterByName(name) {
            name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
            var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
                results = regex.exec(location.search);

            return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
        }
    </script>

    <script type="text/javascript">
        var sUrlBack ='@Url.Action("UserPermissionList", "UserPermission")';
        var objMaxLength = [
            { ctrlID: "txtDes", ctrlType: "area", MaxLength: 500 }];
        var objModel = @Html.Raw(Json.Encode(Model));
        $(function () {

            SetTable();
            BindData(objModel);
            ko.applyBindings(viewModel);
            ValidateForm();
            SetMaxLeangthJS(objMaxLength);
            $("select[id$=ddlGroupPermission]").on("change", function () {
                LoadGroupPermis($(this).val());
            });
            //var Check = $("select[id$=ddlGroupPermission]").val() + "";
            //if (Check != "") {
            //    SetGroupBlue($("select[id$=ddlGroupPermission]").val() + "");

            //}

            @if(Request.QueryString["bUrl"]!=null)
             {
            <text>
            sUrlBack +="?qryStr="+  '@Uri.EscapeDataString(Request.QueryString["bUrl"])';
            </text>
             }
        });
        function Save() {
            var IsPass = true;
            if (!CheckValidateBootstrap("divContent")) {
                IsPass = false;
                FocusValidateBootstrap("divContent");
            }
            if (IsPass) {

                //set value to View
                Enumerable.From(objModel.lstData).ForEach(function (ed) {
                    return ed.view_value = GetValueChkGroupSingelValue("chkView" + ed.menu_id, "");
                });
                //set value to Add
                Enumerable.From(objModel.lstData).ForEach(function (ed) {
                    return ed.add_value = GetValueChkGroupSingelValue("chkAdd" + ed.menu_id, "");
                });
                //set value to Edit
                Enumerable.From(objModel.lstData).ForEach(function (ed) {
                    return ed.edit_value = GetValueChkGroupSingelValue("chkEdit" + ed.menu_id, "");
                });
                //set value to Approve
                Enumerable.From(objModel.lstData).ForEach(function (ed) {
                    return ed.approve_value = GetValueChkGroupSingelValue("chkApprove" + ed.menu_id, "");
                });
                //set value to Detail
                Enumerable.From(objModel.lstData).ForEach(function (ed) {
                    return ed.detail_value = GetValueChkGroupSingelValue("chkDetail" + ed.menu_id, "");
                });
                ko.mapping.fromJS(Enumerable.From(objModel.lstData).Where(function (w) { return (w.view_value == "Y" || w.add_value == "Y" || w.edit_value == "Y" || w.approve_value == "Y" || w.detail_value == "Y") }).ToArray(), {}, viewModel.lstDataSave);
                $("#PopupSave").modal();
            }

        }

        function GetData() {
            var lstData = ko.toJS(viewModel);
            if (lstData != null) {
                lstData.lstData = null;
                lstData.aUnitCode = GetValDropdown('boxDivision');
            }
            return lstData;
        }

        function SaveData (){
            var IsPass = true;
            if (!CheckValidateBootstrap("divContent")) {
                FocusValidateBootstrap("divContent");
                IsPass = false;
            }
            if (IsPass) {
                $("#PopupSave").modal('hide');
                BlockUI();
                var Param = GetData();//ko.toJS(viewModel);
                $.ajax({
                    dataType: AjaxCall.dataType,
                    type: AjaxCall.type,
                    contentType: AjaxCall.contentType,
                    url:'@Url.Action("EditUserPermission", "UserPermission")',
                    data: JSON.stringify({ ItemData : Param }),
                    success: function (respone) {

                        if (respone.result.Status == SysProcess.SessionExpired) {
                            PopupLogin('@Url.Action("Index", "Home")');
                        } else if (respone.result.Status == SysProcess.Success) {
                            DialogSuccessOk(DialogHeader.Info, DialogMsg.SaveComplete, 'func', function () {

                                var prodId = getParameterByName('bUrl');
                                if (prodId != "") {
                                    window.location.href = sUrlBack;
                                }
                                else {
                                    window.location.href = sUrlBack + '?qryStr=%7B%0D%0A%20%20"active_status"%3A%20"Y"%0D%0A%7D';
                                }
                            });
                        }
                        else if (respone.result.Status == SysProcess.Duplicate){
                            DialogWarning(DialogHeader.Warning, respone.result.Msg);
                        }
                        else {
                            DialogWarning(DialogHeader.Warning, respone.result.Msg);
                        }
                    },
                    error: AjaxCall.error,
                    complete: function (jqXHR, status) {//finaly
                        UnblockUI();
                    }
                });
            }
        }
    </script>
    @*Script for bind Data KnockOut*@
    <script type="text/javascript">
        var viewModel = {

        };
        function ViewModel() {
            var self = this;
            self.conditionChecked = ko.observable(false);
            self.loadCondition = function () {
                //ajax request to get condition value. Suppose ajax request returned value "used". so
                self.conditionChecked("used");
            }
            self.loadCondition();
            ko.bindingHandlers.iCheck = { // integrating icheck plugin using bh
                init: function (element, valueAccessor) {
                    var ctrl = $(element);
                    var sID = ctrl[0].id;
                    //initialize icheck to the element
                    $(element).iCheck({
                        radioClass: 'iradio_flat-green'
                    });
                    $(element).on('ifChecked', function (event) {

                        var observable = valueAccessor();
                        observable.checked(event.target.defaultValue); //assigning selected value
                    });
                },
                update: function (element, valueAccessor) {
                    var observable = valueAccessor();
                }
            };
        }
        function BindData(value) {
            if (viewModel.Id == undefined) {
                viewModel = ko.mapping.fromJS(value);
                ViewModel();
                $("input[id*=rdlStatus][value=" + value.active_status + "]").iCheck('check');
                if (objModel.lstData != undefined && objModel.lstData != null) {
                    $('#gvwData').DataTable().clear().draw();
                    $('#gvwData').dataTable().fnAddData(objModel.lstData);
                    $('#gvwData').dataTable().fnDraw();

                    setTimeout(function () {
                        $('#gvwData').DataTable().columns.adjust().draw();
                        $('#gvwData').DataTable().columns.adjust().responsive.recalc();
                    }, 500);
                }
                else {
                    $('#gvwData').DataTable().clear().draw();
                    $('#gvwData').dataTable().fnDraw();
                    $('div[id$=divTable]').collapse("hide");
                }
            }
            else {
                ko.mapping.fromJS(value, {}, viewModel);
                $("input[id*=rdlStatus][value=" + value.active_status + "]").iCheck('check');
            }



        }
        //function for validate form
        function ValidateForm() {
            var objValidatePopUp = {};
            objValidatePopUp[GetElementName("txtSearch", objControl.txtbox)] = addValidate_notEmpty("This value is not valid");
            objValidatePopUp[GetElementName("ddlGroupPermission", objControl.dropdown)] = addValidate_notEmpty("This value is not valid");
            BindValidateBootstrap("divContent", objValidatePopUp);
        }
        function Cancel() {
            window.location.href = sUrlBack;
        }
        function SetTable() {
            var objHeadClRequest = [
                { "title": "", "width": "0%", "className": "dt-left-ctm", "data": "n_seq", "visible": false },
                { "title": "Menu Name", "width": "45%", "className": "dt-left-ctm", "data": "menu_name", "orderable": false },
                { "title": "View", "width": "10%", "className": "dt-center-ctm", "data": "view_action", "orderable": false },
                { "title": "Detail", "width": "11%", "className": "dt-center-ctm", "data": "detail_action", "orderable": false },
                { "title": "Add", "width": "10%", "className": "dt-center-ctm", "data": "add_action", "orderable": false },
                { "title": "Add/Edit", "width": "12%", "className": "dt-center-ctm", "data": "edit_action", "orderable": false },
                { "title": "Approve", "width": "12%", "className": "dt-center-ctm", "data": "approve_action", "orderable": false },
                { "title": "", "width": "0%", "className": "dt-center-ctm", "searchable": false, "orderable": false, "visible": false, "data": "menu_id" },
                { "title": "", "width": "0%", "className": "dt-center-ctm", "data": "menu_level", "visible": false },
                { "title": "", "width": "0%", "className": "dt-center-ctm", "data": "view_value", "visible": false },
                { "title": "", "width": "0%", "className": "dt-center-ctm", "data": "add_value", "visible": false },
                { "title": "", "width": "0%", "className": "dt-center-ctm", "data": "edit_value", "visible": false },
                { "title": "", "width": "0%", "className": "dt-center-ctm", "data": "approve_value", "visible": false },
                { "title": "", "width": "0%", "className": "dt-center-ctm", "data": "detail_value", "visible": false },
            ];

            var objTableRe = {
                sTableID: "gvwData",
                nDis: [],
                sProperty: "<'top col-md-6'>rt<'bottom col-md-6'><'bottom col-md-6 text-right'><'clear'>",
                objHeadCl: objHeadClRequest,//Table Headder
                objDataSet: [], //dataset
                nHeadFix: 0,// fix clr
                EmptyTable: EmptyTable,
                order: [[0, "asc"]],
                columnDefs: [{
                    "targets": 1,
                    "render": function (data, type, row) {
                        return EditNameMenu(row.menu_level) + data;
                    }
                },
                {
                    "targets": 2,
                    "render": function (data, type, row) {
                        if (data != undefined && data == "Y") {
                            return CreateSingleCheckBok("chkView" + row.menu_id, row.view_value);
                        }
                        else {
                            return "";
                        }
                    }
                },
                {
                    "targets": 4,
                    "render": function (data, type, row) {
                        if (data != undefined && data == "Y") {
                            return CreateSingleCheckBok("chkAdd" + row.menu_id, row.add_value);
                        }
                        else {
                            return "";
                        }
                    }
                },
                {
                    "targets": 5,
                    "render": function (data, type, row) {
                        if (data != undefined && data == "Y") {
                            return CreateSingleCheckBok("chkEdit" + row.menu_id, row.edit_value);
                        }
                        else {
                            return "";
                        }
                    }
                },
                {
                    "targets": 6,
                    "render": function (data, type, row) {
                        if (data != undefined && data == "Y") {
                            return CreateSingleCheckBok("chkApprove" + row.menu_id, row.approve_value);
                        }
                        else {
                            return "";
                        }
                    }
                }, {
                    "targets": 3,
                    "render": function (data, type, row) {
                        if (data != undefined && data == "Y") {
                            return CreateSingleCheckBok("chkDetail" + row.menu_id, row.detail_value);
                        }
                        else {
                            return "";
                        }
                    }
                },
                ],
                objBeforeClRender: false,
                lengthMN: [[-1], ["All"]],
            };

            var table = CreatTableJS(objTableRe);
            //new $.fn.dataTable.FixedHeader($('#gvwData'));
            $('#' + objTableRe.sTableID + '').dataTable().on('draw.dt', function (settings) {
                SetICheckCheckBox();
            });
        }
        function EditNameMenu(nNum) {
            var Return = "";
            if (nNum != undefined && nNum > 1) {
                for (i = 1; i <= nNum * 2; i++) {
                    Return += "&nbsp";
                }

            }
            //&nbsp;
            return Return;
        }

    </script>
    <script type="text/javascript">
        function LoadGroupPermis(sVal) {
            UnCheckedAll();
            var Param = sVal;
                $.ajax({
                    dataType: AjaxCall.dataType,
                    type: AjaxCall.type,
                    contentType: AjaxCall.contentType,
                    url:'@Url.Action("LoadGroupPermis", "UserPermission")',
                    data: JSON.stringify({ SearchItem: Param }),
                    success: function (respone) {
                        if (respone.Status == SysProcess.SessionExpired) {
                            @*PopupLogin('@Url.Action("Index", "Home")');*@
                        } else if (respone.Status == SysProcess.Success) {
                            var lstData = respone.lstData;
                            if (lstData != undefined && lstData.length > 0) {
                                $.each(lstData, function (key, value) {
                                    if (value.Action_Type == "1") {
                                        $('#chkView' + value.menu_id).iCheck('check');
                                    }
                                    else if (value.Action_Type == "2") {
                                        $('#chkAdd' + value.menu_id).iCheck('check');
                                    }
                                    else if (value.Action_Type == "3") {
                                        $('#chkEdit' + value.menu_id).iCheck('check');
                                    }
                                    else if (value.Action_Type == "4") {
                                        $('#chkApprove' + value.menu_id).iCheck('check');
                                    }
                                    else if (value.Action_Type == "5") {
                                        $('#chkDetail' + value.menu_id).iCheck('check');
                                    }
                                });
                            }
                        }
                        else {
                            DialogWarning(DialogHeader.Warning, respone.Msg);
                        }
                    },
                    error: AjaxCall.error,
                    complete: function (jqXHR, status) {//finaly
                        UnblockUI();
                    }
                });
        }
        function UnCheckedAll() {
            $('input[id*=chk]').iCheck('uncheck');
        }

    </script>
}