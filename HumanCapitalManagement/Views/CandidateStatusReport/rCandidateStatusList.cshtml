
@{
    ViewBag.Title = "HCM | Candidates Report";
    Layout = "~/Views/Shared/_LPMaster.cshtml";
}

<!-- Content Header (Page header) -->
<section class="content-header">
    <h1>
        Candidates Report
    </h1>
    <div class="row">
        <div class="box box-solid">
            <div class="box-body no-border no-pad-top no-pad-bot">
                <div class="row">
                    <div class="form-group form-group-sm col-sm-4  col-xs-4">
                        <div class="input-group">
                            <span class="input-group-addon nomallabel">Group</span>
                            @{ Html.RenderAction("CreateDivisionCode", "HCMMasterData", new
                                {
                                    id = "ddlGroup",
                                    databind = "group_code",
                                    value = ""
                                });}
                        </div>
                    </div>
                    <div class="form-group form-group-sm col-sm-4  col-xs-4">
                        <div class="input-group">
                            <span class="input-group-addon nomallabel">SubGroup</span>
                            <select id="ddlSupGroup" name="ddlSupGroup" class="form-control" data-bind="options: lstSubGroup, optionsText: 'name', optionsValue: 'id',
                                               value: sub_group_id,
                                               valueAllowUnset: true"></select>
                        </div>
                    </div>
                    <div class="form-group form-group-sm col-sm-4  col-xs-4">
                        <div class="input-group">
                            <span class="input-group-addon nomallabel">Position</span>
                            <select id="ddlPosition" name="ddlPosition" class="form-control" data-bind="options: lstPosition, optionsText: 'name', optionsValue: 'id',
                                               value: position_id,
                                               valueAllowUnset: true"></select>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="form-group form-group-sm col-sm-4  col-xs-4">
                        <div class="input-group">
                            <span class="input-group-addon nomallabel">Ref No.</span>
                            <input type="text" id="txtSearch" name="txtSearch" class="form-control" data-bind="value : ref_no , valueUpdate: 'afterkeydown'" />
                        </div>
                    </div>
                    <div class="form-group form-group-sm col-sm-4  col-xs-4">
                        <div class="input-group">
                            <span class="input-group-addon nomallabel">Name</span>
                            <input type="text" id="txtSearchName" name="txtSearchName" class="form-control" data-bind="value : name , valueUpdate: 'afterkeydown'" />
                        </div>
                    </div>
                </div>
                @*<div class="row">
                        <div class="form-group form-group-sm col-sm-4  col-xs-4">
                            <div class="input-group">
                                <span class="input-group-addon nomallabel">Interview Start</span>
                                <input ID="txtDateIntStart" name="txtDateIntStart" class="form-control " type="text"
                                       ToolTip="To" placeholder="-- / -- / ----" data-bind="value : target_start, valueUpdate: 'afterkeydown' " />
                            </div>
                        </div>

                        <div class="form-group form-group-sm col-sm-4  col-xs-4">
                            <div class="input-group">
                                <span class="input-group-addon nomallabel">Interview End</span>
                                <input ID="txtDateIntEnd" name="txtDateIntEnd" class="form-control " type="text"
                                       ToolTip="To" placeholder="-- / -- / ----" data-bind="value : target_end, valueUpdate: 'afterkeydown' " />
                            </div>
                        </div>

                    </div>
                    <div class="row">
                        <div class="form-group form-group-sm col-sm-6 col-xs-6">
                            <div class="col-md-12" style=" margin-top:5px;">
                                <label class="control-label">
                                    <input type="radio" name="tiftype" id="rdltiftype1" class="flat-green radio radio-inline" data-bind='iCheck: { checked: tif_type}' value="N">Non-Mass<br>
                                </label>
                                <label class="control-label">
                                    <input type="radio" name="tiftype" id="rdltiftype2" class="flat-green radio radio-inline" data-bind='iCheck: { checked: tif_type}' value="M">Mass<br>
                                </label>
                                <label class="control-label">
                                    <input type="radio" name="tiftype" id="rdltiftype3" class="flat-green radio radio-inline" data-bind='iCheck: { checked: tif_type}' value="X">All<br>
                                </label>
                            </div>
                        </div>
                    </div>*@
                <div class="row">
                    <div class="form-group form-group-sm col-xs-12  text-left">
                        <button type="button" class="btn btn-info" onclick="LoadData();">Search</button>
                    </div>
                </div>

            </div>
        </div>
    </div>
</section>

<!-- Main content -->
<div class="collapse in" id="divTable">
    <section class="content no-pad-top ">
        <form class="form-horizontal">
            <div class="row">
                <div class="col-md-12">
                    <!-- general form elements -->
                    <div class="box box-primary">
                        <div class="box-header with-border">
                            Search Results
                            <div class="box-tools pull-right">
                                <button id="btnRefeshTable" type="button" class="btn btn-box-tool" onclick="RefreshTable(this)">
                                    <i class="fa fa-refresh"></i>
                                </button>
                            </div>
                        </div>
                        <!-- /.box-header -->
                        <!-- form start -->
                        <div class="box-body">
                            <div class="row">
                                <div class="col-md-12">
                                    <button type="button" id="btnExport" class="btn btn-default" onclick="LoadExcel();"><img src="~/Image/filetype_xls.png" height="30"></button>
                                  
                                </div>
                            </div>
                            <div class="row ">
                                <div class="col-md-12">
                                    <div class="table-responsive">
                                        <table class="table table-striped table-bordered table-hover display" id="gvwData">
                                            <thead>
                                            </thead>
                                            <tbody></tbody>
                                        </table>
                                    </div>

                                </div>
                            </div>
                        </div>
                        <!-- /.box-body -->
                    </div>
                </div>
                <input type="hidden" id="txtSess" name="txtSess" class="form-control" data-bind='value: session' />
            </div>
        </form>
        @*<%--[modal] before Add--%>*@
        <div id="PopupSave" class="modal fade" tabindex="-1" role="dialog">
            <div class="modal-dialog widthPOP">
                <div class="modal-content">
                    <div class="modal-header" style="background-color: #337ab7;">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                        <span class="modal-title"><b style="color: white;">Exporting Excel / Printing Data</b></span>
                    </div>
                    <div class="modal-body">
                        <div id="divCreatePopUp">

                            <div class="row">
                                <div class="col-md-12">
                                    <div class="form-group">
                                        <label class="col-md-12 text-center">Do you want to export Excel / print data of all selected entries? </label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button id="btnOK" type="button" onclick="LoadExcel()" class="btn btn-primary">OK</button>
                        <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        @*<%--[modal] before Add--%>*@
        <div id="PopupMass" class="modal fade" tabindex="-1" role="dialog">
            <div class="modal-dialog widthPOP">
                <div class="modal-content">
                    <div class="modal-header" style="background-color: #337ab7;">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                        <span class="modal-title"><b style="color: white;">Exporting PDF / Printing Data</b></span>
                    </div>
                    <div class="modal-body">
                        <div id="divCreatePopUp">

                            <div class="row">
                                <div class="col-md-12">
                                    <div class="form-group">
                                        <label class="col-md-12 text-center">Do you want to export PDF / print data of all selected entries? </label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button id="btnOK" type="button" onclick="LoadMassPDF()" class="btn btn-primary">OK</button>
                        <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    </section>
</div>
@section style{
    <style>
        th, td {
            white-space: nowrap;
        }

        div.dataTables_wrapper {
            margin: 0 auto;
        }

        .DTFC_Cloned {
            height: 100% !important;
        }
    </style>
}
@section scripts{
    <script src="~/Scripts/plugins/knockout-3.4.2.js"></script>
    <script src="~/Scripts/plugins/knockout.mapping-latest.js"></script>
    <script src="~/Scripts/plugins/DataTables2/datetimeSort.js"></script>
    <script src="~/Scripts/plugins/jsLinq/linq.min.js"></script>
    <script src="~/Scripts/plugins/jsLinq/jquery.linq.min.js"></script>

    <script type="text/javascript">
        var objModel = @Html.Raw(Json.Encode(Model));
        var objlstData = [];
        $(function () {
            SetTable();
            BindData(objModel);
            ko.applyBindings(viewModel);
            $("select[id$=ddlGroup]").on("change", function () {
                ActionddlGroup($(this).val());
            });
            setDatePickerFromTo(GetInputByID("txtDateIntStart"), GetInputByID("txtDateIntEnd"));
        });
           function ActionddlGroup(val) {
            var Param = val;
            if (Param != "") {
                $.ajax({
                    dataType: AjaxCall.dataType,
                    type: AjaxCall.type,
                    contentType: AjaxCall.contentType,
                    url: '@Url.Action("GetGroupDetailForSearch", "PersonnelRequest")',
                    data: JSON.stringify({ SearchItem: Param }),
                    success: function (respone) {
                        if (respone != undefined) {
                            var newList = ko.toJS(viewModel);
                            if (newList.group_code != undefined) {
                                newList.sub_group_id = respone.sub_group_id + '';
                                newList.position_id = respone.position_id + '';
                                newList.lstSubGroup = respone.lstSubGroup;
                                newList.lstPosition = respone.lstPosition;
                                BindData(newList);
                            }

                        }
                    },
                    error: AjaxCall.error,
                    complete: function (jqXHR, status) {//finaly
                        UnblockUI();
                    }
                });
            } else {
                var newList = ko.toJS(viewModel);
                if (newList.group_code != undefined) {
                    newList.sub_group_id =  '';
                    newList.position_id = '';
                    newList.lstSubGroup =[{ id: "", name: " - Select - " }];
                    newList.lstPosition = [{ id: "", name: " - Select - " }];
                    BindData(newList);
                }
            }

        }

        function Search() {
            var lstSearch = ko.toJS(viewModel)
            if (lstSearch != null) {
                lstSearch.tif_type = GetValRadioListNotValidate("tiftype");
            }
            return lstSearch;
        };
        function LoadData() {
            $('div[id$=divTable]').collapse("show");
            $('#gvwData').DataTable().columns.adjust().draw();
            var Param = Search();
            BlockUI();
            $.ajax({
                type: "POST",
                url: '@Url.Action("LoadCandidateStatusList", "CandidateStatusReport")',
                dataType: "json",
                data: { SearchItem: Param },
                success: function (response) {
                    if (response.result.Status == SysProcess.SessionExpired) {1
                        PopupLogin('@Url.Action("Index", "Home")');
                    }
                    else {
                        var lstData = response.result.lstData;
                        if (lstData == undefined || lstData.length <= 0) {
                            $('div[id$=divTable]').collapse("show");
                            $('#gvwData').DataTable().clear().draw();
                            $('#gvwData').dataTable().fnDraw();
                            $('#gvwData').DataTable().columns.adjust().draw();
                            objlstData = [];
                        }
                        else {
                            $('div[id$=divTable]').collapse("show");
                            $('#gvwData').DataTable().clear().draw();
                            $('#gvwData').dataTable().fnAddData(lstData);
                            $('#gvwData').dataTable().fnDraw();
                            $('#gvwData').DataTable().columns.adjust().draw();
                            objlstData = lstData;
                        }
                    }
                },
                complete: function (jqXHR, status) {//finaly
                    UnCheckCheckBoxHeader("ckbAll");
                    SetICheck();
                    SetCheckBoxSelectRowInGrid("gvwData", "ckbAll", "chkRow", "fix");
                    UnblockUI();
                }
            });
        }

        function Cancel() {
            window.location.reload();
        }

        function SetTable() {
            var objHeadClRequest = [
                { "title": "", "width": "10px", "className": "dt-chk-ctm", "searchable": false, "orderable": false, "data": "Id" },
                { "title": "Ref No.", "width": "55px", "className": "dt-center-ctm", "data": "refno" },
                { "title": "Status", "width": "70px","className": "dt-center-ctm", "data": "pr_status" },
                { "title": "Group", "width": "65px", "className": "dt-center-ctm", "data": "group_name" },
                { "title": "SubGroup", "width": "70px", "className": "dt-center-ctm", "data": "sub_group" },
                { "title": "Position", "width": "70px", "className": "dt-left-ctm", "data": "position" },
                { "title": "Rank", "width": "70px", "className": "dt-center-ctm", "data": "pr_rank" },
                { "title": "Candidate Name", "width": "100px", "className": "dt-left-ctm", "data": "name_en" },
                { "title": "Current Status", "width": "130px", "className": "dt-center-ctm", "data": "candidate_status" },
                {
                    "title": "Action Date<br/>of Current Status", "width": "130px", "className": "dt-center-ctm", "data": "candidate_status_date" },
                { "title": "Recom.<br/>Rank<br/>(After int.)", "width": "50px", "className": "dt-center-ctm", "data": "rank" },
                //{ "title": "Type", "width": "50px", "className": "dt-center-ctm", "data": "pr_type" },
                { "title": "TIF Result", "width": "50px", "className": "dt-center-ctm", "data": "tif_result" },
                { "title": "First Evaluator<br/>Name", "width": "100px", "className": "dt-center-ctm", "data": "first_eva" },
               // { "title": "First<br/>Evaluation<br/>Date", "width": "80px", "className": "dt-center-ctm", "data": "first_eva_date" },
                { "title": "Second Evaluator<br/>Name", "width": "100px", "className": "dt-center-ctm", "data": "second_eva" },
               // { "title": "Second<br/>Evaluation<br/>Date", "width": "80px", "className": "dt-center-ctm", "data": "second_eva_date" },
                { "title": "Recruiter", "width": "110px", "className": "dt-center-ctm", "data": "hr_owner" },
            ];

            var objTableRe = {
                sTableID: "gvwData",
                nDis: [],
                sProperty: "<'top col-md-6'l>rt<'bottom col-md-6'fi><'bottom col-md-6 text-right'p><'clear'>",//length pangging
                objHeadCl: objHeadClRequest,//Table Headder
                objDataSet: [], //dataset
                nHeadFix: 5,// fix clr
                EmptyTable: EmptyTable,
                order: [[7, "asc"]],
                lengthMN: [[25, 50, 150, -1], [25,50, 150, "All"]],
                columnDefs: [],
                objBeforeClRender: false,
                nRunningNumber: ["true", 0],
                createdRow: function (row, data, index) {
                    if (data["pr_status_id"] + "" == "2") {
                        $('td', row).eq(2).addClass('dt-status-wait');
                    }
                    else if (data["pr_status_id"] + "" == "3") {
                        $('td', row).eq(2).addClass('dt-status-suss');
                    }
                    else if (data["pr_status_id"] + "" == "5" || data["pr_status_id"] + "" == "6") {
                        $('td', row).eq(2).addClass('dt-status-cl');
                    }
                    else if (data["pr_status_id"] + "" == "4") {
                        $('td', row).eq(2).addClass('dt-status-comp');
                    }
                    else {
                        $('td', row).eq(2).addClass('dt-status-nol');
                    }
                }
            };

            var table = CreatTableJS(objTableRe);
            $('#' + objTableRe.sTableID + '').dataTable().on('draw.dt', function (settings) {
                $("div[id$=" + objTableRe.sTableID + "_wrapper] div.icheckbox_flat-green input[id$=chkRow]").iCheck('uncheck');
                $('div[id=' + objTableRe.sTableID + '_wrapper] div.DTFC_ScrollWrapper ').height($('div[id=' + objTableRe.sTableID + '_wrapper] div.DTFC_ScrollWrapper div.dataTables_scroll').height());
            });
        }
    </script>
    @*Script for bind Data KnockOut*@
    <script type="text/javascript">
        var viewModel = {

        };
        function ViewModel() {
            var self = this;
            self.conditionChecked = ko.observable(false);
            self.loadCondition = function () {
                //ajax request to get condition value. Suppose ajax request returned value "used". so
                self.conditionChecked("used");
            }
            self.loadCondition();
            ko.bindingHandlers.iCheck = { // integrating icheck plugin using bh

                init: function (element, valueAccessor) {
                    var ctrl = $(element);
                    var sID = ctrl[0].id;
                    //initialize icheck to the element
                    $(element).iCheck({
                        radioClass: 'iradio_flat-green'
                    });
                    $(element).on('ifChecked', function (event) {

                        var observable = valueAccessor();
                        observable.checked(event.target.defaultValue); //assigning selected value
                        //observable.checked(true);
                    });

                },
                update: function (element, valueAccessor) {
                    var observable = valueAccessor();
                }
            };
        }
        function BindData(value) {
            if (viewModel.name == undefined) {
                viewModel = ko.mapping.fromJS(value);
                ViewModel();
                $("input[id*=rdltiftype][value=" + value.tif_type + "]").iCheck('check');
                if (objModel.lstData != undefined && objModel.lstData != null && objModel.lstData.length > 0) {
                    $('#gvwData').DataTable().clear().draw();
                    $('#gvwData').dataTable().fnAddData(objModel.lstData);
                    $('#gvwData').dataTable().fnDraw();
                    objlstData = objModel.lstData;
                    setTimeout(function () {
                        $('#gvwData').DataTable().columns.adjust().draw();
                        $('#gvwData').DataTable().columns.adjust().responsive.recalc();
                    }, 500);
                }
                else {
                    $('#gvwData').DataTable().clear().draw();
                    $('#gvwData').dataTable().fnDraw();
                    $('div[id$=divTable]').collapse("hide");
                }
            }
            else {
                ko.mapping.fromJS(value, {}, viewModel);
                $("input[id*=rdltiftype][value=" + value.tif_type + "]").iCheck('check');
            }


        }
             $(function () {
            $(window).bind('beforeunload', function () {

                var aSession = [$('input[id$=txtSess]').val()];

                //var sValHdf = $('input[id$=hfdSess]').val();
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("ClearSession", "Base")',
                    cache: false,
                    dataType: "html",
                    data: {
                        sVal: encodeURIComponent(aSession)
                    },
                    complete: function (jqXHR, status) {//finaly
                    }
                });
            });
        });
    </script>
    <script type="text/javascript">
         function Save() {
            var Acceptlst = [];
             Enumerable.From(objlstData).ForEach(function (ed) { return ed.statusvalue = GetValueChkGroupSingelValue(ed.Id + ""); });

             Acceptlst = Enumerable.From(objlstData).Where(function (w) { return w.statusvalue == "Y" }).ToArray();
            var $Accept = GetLabelByID("lblAccept");

            if (Acceptlst.length == 0) {
                DialogWarning(DialogHeader.Warning, "Please select at least one item.");
            }
            else {

                if (Acceptlst.length > 0) {
                    //var AcceptNumber = Enumerable.From(Acceptlst).Sum(function (s) { return ConvertToIntNotnull(s.AMOUNT_AMT) });
                    //var strReturnAccept = 'Do you want to print ' + Acceptlst.length + ' entries?';
                    //$Accept.text(strReturnAccept);
                }
                else {
                   // $Accept.text('Not specify.');
                }
                $("#PopupSave").modal();
            }
        }
        function GetData() {
            var lstData = "";
            Enumerable.From(objlstData).Where(function (w) { return w.statusvalue == "Y" }).ForEach(function (ed) {
                lstData += ed.Id+",";
                });

            return lstData;
        }
        function LoadExcel()
        {
            var sVal = "";//GetData();
            BlockUI();
            window.open('@Url.Action("ExpCandidateStatus", "rpCandidateReport")?qryStr=' + sVal + '&session=' + ko.toJS(viewModel.session), '_blank');
            setTimeout(function () {
                UnblockUI();
                $("#PopupSave").modal('hide');
            }, 500);

        }
  
    </script>
    <script type="text/javascript">
         function printMass() {
            var Acceptlst = [];
             Enumerable.From(objlstData).ForEach(function (ed) { return ed.statusvalue = GetValueChkGroupSingelValue(ed.Id + ""); });

             Acceptlst = Enumerable.From(objlstData).Where(function (w) { return w.statusvalue == "Y" }).ToArray();
            var $Accept = GetLabelByID("lblAccept");

            if (Acceptlst.length == 0) {
                DialogWarning(DialogHeader.Warning, "Please select at least one item.");
            }
            else {

                if (Acceptlst.length > 0) {
                    //var AcceptNumber = Enumerable.From(Acceptlst).Sum(function (s) { return ConvertToIntNotnull(s.AMOUNT_AMT) });
                    //var strReturnAccept = 'Do you want to print ' + Acceptlst.length + ' entries?';
                    //$Accept.text(strReturnAccept);
                }
                else {
                   // $Accept.text('Not specify.');
                }
                $("#PopupMass").modal();
            }
        }
        function GetDataMass() {
            var lstData = "";
            Enumerable.From(objlstData).Where(function (w) { return w.statusvalue == "Y" }).ForEach(function (ed) {
                lstData += ed.Id + ",";
            });

            return lstData;
        }
        function LoadMassPDF()
        {
            var sVal = GetDataMass();
            BlockUI();
            window.open('@Url.Action("ExpMASSTIFFormList", "rpTIFForm")?qryStr=' + sVal + '&sMode=' + ko.toJS(viewModel.session), '_blank');
            setTimeout(function () {
                UnblockUI();
                $("#PopupMass").modal('hide');
            }, 500);

        }

    </script>
}
<!-- /.content -->
