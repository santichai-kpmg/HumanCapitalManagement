@model HumanCapitalManagement.ViewModel.MainVM.vInterview_obj_save
@{
    ViewBag.Title = "HCM | Manage TIF Edit";
    Layout = "~/Views/Shared/_LPMaster.cshtml";
}

<section class="content-header">
    <h1>
        Manage TIF Edit
    </h1>
</section>
<!-- Main content -->
<section class="content">
    <form class="form-horizontal">
        <div id="divContent">


            <div class="row">
                <div class="col-lg-4 col-md-offset-3">
                    <div class="box box-solid box-ctmPR4">
                        <div class="box-header with-border">
                            <h3 class="box-title">TIF Confirmation Process</h3>
                        </div>
                        <!-- /.box-header -->
                        <!-- form start -->
                        @*<div class="box-body">
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="form-group form-group-sm col-sm-12">
                                            <div class="input-group">
                                                <span class="input-group-addon nomallabel">Approver no</span>
                                                <input type="text" class="form-control" data-bind="value : approve_user , valueUpdate: 'afterkeydown'" />
                                            </div>
                                        </div>
                                    </div>
                                </div>

                            </div>*@
                        <!-- /.box-body -->


                        <div class="box-body  ">
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="form-group form-group-sm col-sm-12">
                                        <div class="input-group">
                                            <span class="input-group-addon nomallabel">New approver no</span>
                                            <input type="text" class="form-control " style="display:none;" id="txtMGID" name="txtMGID" disabled>
                                            <input type="text" id="txtSearch" name="txtSearch" class="form-control" data-bind="value : approve_user , valueUpdate: 'afterkeydown'" />
                                        </div>
                                    </div>
                                </div>
                            </div>

                        </div>
                    </div>
                </div>
            </div>



            <div class="form-group form-group-sm text-center">
                <div class="row">
                    <div class="col-md-12">
                        <div class="form-group form-group-sm">
                            <button id="btnGive" type="button" class="btn btn-primary" onclick="Save();" style="width:150px;">Update</button>
                        </div>
                    </div>

                </div>
            </div>

        </div>
    </form>
    @*<%--[modal] before Add--%>*@
    <div id="PopupSave" class="modal fade" tabindex="-1" role="dialog">
        <div class="modal-dialog widthPOP">
            <div class="modal-content">
                <div class="modal-header" style="background-color: #337ab7;">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <span class="modal-title"><b style="color: white;">Saving Confirmation</b></span>
                </div>
                <div class="modal-body">
                    <div id="divCreatePopUp">
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <label class="col-md-12 text-center">Do you want to submit?</label>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
                <div class="modal-footer">
                    <button id="btnOK" type="button" onclick="SaveData()" class="btn btn-primary">OK</button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                </div>
            </div>
        </div>
    </div>

</section>
@section style{



}

@section scripts{
    <script src="~/Scripts/plugins/bootstrapValidate/dist/js/bootstrapValidator.js"></script>
    <script src="~/Scripts/plugins/knockout-3.4.2.js"></script>
    <script src="~/Scripts/plugins/knockout.mapping-latest.js"></script>
    <script src="~/Scripts/plugins/jquery-inputmask/min/inputmask/inputmask.min.js"></script>
    <script src="~/Scripts/plugins/jquery-inputmask/min/inputmask/inputmask.numeric.extensions.min.js"></script>
    <script src="~/Scripts/plugins/jquery-inputmask/min/inputmask/jquery.inputmask.min.js"></script>
    <script src="~/Scripts/plugins/jsLinq/linq.min.js"></script>
    <script src="~/Scripts/plugins/jsLinq/jquery.linq.min.js"></script>
    @*Script for bind Data KnockOut*@

    <script type="text/javascript">
        var url = document.URL;
        function getParameterByName(name) {
            name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
            var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
                results = regex.exec(location.search);

            return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
        }
        var objModel = @Html.Raw(Json.Encode(Model));

       var sUrlBack = '@Url.Action("APTIFFormList", "Interview")';
       $(function () {
        @if (Request.QueryString["bUrl"] != null)
           {
       <text>
           sUrlBack += "?qryStr=" + '@Uri.EscapeDataString(Request.QueryString["bUrl"])';
       </text>
       }

        });

    </script>

    <script type="text/javascript">
        var objMaxLength = [
            { ctrlID: "txtcomment", ctrlType: "area", MaxLength: 1000 }];
        var save_Status = "";
        $(function () {
            SetTableCandidate();
            SetTableApprove();
            BindData(objModel);
            ko.applyBindings(viewModel);
            ValidateForm();

            SetMaxLeangthJS(objMaxLength);

            SetAutocom("txtSearch");

        });



    </script>
    @*Script for bind Data KnockOut*@
    <script type="text/javascript">
        var viewModel = {

        };
        function ViewModel() {
            var self = this;
            self.conditionChecked = ko.observable(false);
            self.loadCondition = function () {
                //ajax request to get condition value. Suppose ajax request returned value "used". so
                self.conditionChecked("used");
            }
            self.loadCondition();
            ko.bindingHandlers.iCheck = { // integrating icheck plugin using bh
                init: function (element, valueAccessor) {
                    var ctrl = $(element);
                    var sID = ctrl[0].id;
                    //initialize icheck to the element
                    $(element).iCheck({
                        radioClass: 'iradio_flat-green'
                    });
                    $(element).on('ifChecked', function (event) {

                        var observable = valueAccessor();
                        observable.checked(event.target.defaultValue); //assigning selected value
                    });
                },
                update: function (element, valueAccessor) {
                    var observable = valueAccessor();
                }
            };

        }
        function BindData(value) {
            if (viewModel.Id == undefined) {
                viewModel = ko.mapping.fromJS(value);
                ViewModel();
                $("input[id*=chkStatus][value='" + value.confidentiality_agreement + "']").iCheck('check');
                if (value.TIF_type + "" == "N" || value.TIF_type + "" == "M") {

                    if (objModel.objtifform != undefined && objModel.objtifform != null && objModel.objtifform.lstQuestion != undefined && objModel.objtifform.lstQuestion != null && objModel.objtifform.lstQuestion.length > 0) {
                        $('#gvwData').DataTable().clear().draw();
                        $('#gvwData').dataTable().fnAddData(objModel.objtifform.lstQuestion);
                        $('#gvwData').dataTable().fnDraw();
                        setTimeout(function () {
                            $('#gvwData').DataTable().columns.adjust().draw();
                            $('#gvwData').DataTable().columns.adjust().responsive.recalc();
                        }, 500);
                    }
                    else {
                        $('#gvwData').DataTable().clear().draw();
                        $('#gvwData').dataTable().fnDraw();
                        $('div[id$=divTable]').collapse("hide");
                    }
                    if (objModel.lstApprove != undefined && objModel.lstApprove != null && objModel.lstApprove.length > 0) {
                        $('#gvwDataApprove').DataTable().clear().draw();
                        $('#gvwDataApprove').dataTable().fnAddData(objModel.lstApprove);
                        $('#gvwDataApprove').dataTable().fnDraw();

                        setTimeout(function () {
                            $('#gvwDataApprove').DataTable().columns.adjust().draw();
                            $('#gvwDataApprove').DataTable().columns.adjust().responsive.recalc();
                        }, 500);
                    }
                    else {
                        $('#gvwDataApprove').DataTable().clear().draw();
                        $('#gvwDataApprove').dataTable().fnDraw();
                        $('div[id$=divTable]').collapse("hide");
                    }
                }
            }
            else {
                $("input[id*=chkStatus][value='" + value.confidentiality_agreement + "']").iCheck('check');
                ko.mapping.fromJS(value, {}, viewModel);
            }

        }
        function Cancel() {
            window.location.href = sUrlBack;
        }


    </script>
    <script type="text/javascript">
        function SetTableCandidate() {
            var objHeadClRequest = [
                { "title": "", "width": "0%", "className": "dt-center-ctm", "searchable": false, "orderable": false, "data": "nSeq", "visible": false },
                { "title": "", "width": "0%", "className": "dt-center-ctm", "searchable": false, "orderable": false, "data": "id", "visible": false },
                { "title": "Features used in evaluation", "width": "27%", "className": "dt-right-ctm", "searchable": false, "orderable": false, "data": "question", },
                { "title": "Rating", "width": "18%", "className": "dt-left-ctm", "data": "rating", "searchable": false, "orderable": false },
                { "title": "Reason Supporting the Given Rating", "width": "55%", "className": "dt-left-ctm", "data": "remark", "searchable": false, "orderable": false },
            ];

            var objTableRe = {
                sTableID: "gvwData",
                nDis: [],
                sProperty: "<'top col-md-6'>rt<'bottom col-md-6'><'bottom col-md-6 text-right'><'clear'>",
                objHeadCl: objHeadClRequest,//Table Headder
                objDataSet: [], //dataset
                nHeadFix: 0,// fix clr
                EmptyTable: EmptyTable,
                order: [[0, "asc"]],
                objBeforeClRender: false,
                lengthMN: [[-1], ["All"]],
                columnDefs: [{
                    "targets": 2,
                    "render": function (data, type, row) {
                        sHtml = "<strong>" + row.header + "</strong><br/>" + data;
                        return sHtml;
                    }
                },
                {
                    "targets": 3,
                    "render": function (data, type, row) {
                        var sHtml = "";
                        if (objModel.objtifform.lstRating != undefined && objModel.objtifform.lstRating != null && objModel.objtifform.lstRating.length > 0) {
                            sHtml = CreatSelect("ddlRating" + row.id, JSON.stringify(objModel.objtifform.lstRating), data, "Y");
                            //sHtml = CreatSelect("ddlRating" + row.id, JSON.stringify(objModel.objtifform.lstRating), data, objModel.approve_status + "");
                        }
                        return sHtml;
                    },
                },
                {
                    "targets": 4,
                    "render": function (data, type, row) {
                        return CreateTextAreaInt("txtRemark" + row.id, 1000, data, "Y");
                        //return CreateTextAreaInt("txtRemark" + row.id, 1000, data, objModel.approve_status + "");
                    }
                }
                ],
                fixedHeader: {
                    header: false,
                    footer: false
                }

            };

            var table = CreatTableJS(objTableRe);

        }
        function CreateTextAreaInt(sID, sMaxlength, sValue, sDisable) {
            $("input[id$=" + sID + "]").unbind();
            var sDis = "";
            if (sDisable != undefined && sDisable == "Y") {
                sDis = "disabled";
            }
            var sSetValue = sValue != undefined && sValue != "" ? "value='" + sValue + "'" : "";
            var sMaxlength = sMaxlength != undefined && sMaxlength != "" ? "maxlength='" + sMaxlength + "'" : "";
            var sHtml = "<textarea rows='3' cols='50'  id='" + sID + "' name='" + sID + "' class='form-control' " + sMaxlength + " " + sSetValue + " style='width:100%;' " + sDis + "  >" + sValue + "</textarea>";

            return sHtml;
        }
        //function for validate form
        function ValidateForm() {
            var objValidatePopUp = {};
            objValidatePopUp[GetElementName("ddlTIFStatus", objControl.dropdown)] = addValidate_notEmpty("This value is not valid");
            objValidatePopUp[GetElementName("ddlRank", objControl.dropdown)] = addValidate_notEmpty("This value is not valid");
            BindValidateBootstrap("divContent", objValidatePopUp);
        }

    </script>
    <script type="text/javascript">
        function SetTableApprove() {
            var objHeadClRequest = [
                { "title": "Evaluator", "width": "10%", "className": "dt-center-ctm", "searchable": false, "orderable": false, "data": "nStep" },
                { "title": "Evaluator’s Name", "width": "35%", "className": "dt-left-ctm", "data": "app_name", "searchable": false, "orderable": false },
                { "title": "Confirmed Date", "width": "25%", "className": "dt-center-ctm", "data": "approve_date", "searchable": false, "orderable": false },
                { "title": "Status", "width": "20%", "className": "dt-center-ctm", "data": "app_code", "searchable": false, "orderable": false },
            ];

            var objTableRe = {
                sTableID: "gvwDataApprove",
                nDis: [],
                sProperty: "<'top col-md-6'>rt<'bottom col-md-6'><'bottom col-md-6 text-right'><'clear'>",
                objHeadCl: objHeadClRequest,//Table Headder
                objDataSet: [], //dataset
                nHeadFix: 0,// fix clr
                EmptyTable: EmptyTable,
                order: [[0, "asc"]],
                objBeforeClRender: false,
                lengthMN: [[-1], ["All"]],
                columnDefs: [{
                    "targets": 2,
                    "render": function (data, type, row) {

                        return data;
                    }
                }
                ],
                fixedHeader: {
                    header: false,
                    footer: false
                }

            };

            var table = CreatTableJS(objTableRe);

        }
    </script>
}
@if (Model.approve_status + "" != "Y")
{
    @section scripts2{
        <script type="text/javascript">
            function Save(sVal) {
                var Acceptlst = [];
                var IsPass = true;
                if (!CheckValidateBootstrap("divContent")) {
                    IsPass = false;
                    FocusValidateBootstrap("divContent");
                }
                
                ko.mapping.fromJS(objModel.approve_user, {}, $('#txtSearch').val());
                ko.toJS(viewModel);

                $("#PopupSave").modal();
            }

            function GetData() {
                var lstData = ko.toJS(viewModel);
                if (lstData != null) {
                   
                }
                return lstData;
            }

         function SaveData() {
             var IsPass = true;
             $("#PopupSave").modal('hide');
             var Param = GetData();// ko.toJS(viewModel);
             if (IsPass) {
                 BlockUI();
                 $.ajax({
                     dataType: AjaxCall.dataType,
                     type: AjaxCall.type,
                     contentType: AjaxCall.contentType,
                     url: '@Url.Action("SaveApproveTIFFormList", "ManageTifAndPr")',
                     data: JSON.stringify({ ItemData: Param }),
                     success: function (respone) {
                         if (respone.result.Status == SysProcess.SessionExpired) {
                             PopupLogin('@Url.Action("Index", "Home")');
                         } else if (respone.result.Status == SysProcess.Success) {
                             DialogSuccessOk(DialogHeader.Info, DialogMsg.SaveComplete, 'func', function () {

                                 var prodId = getParameterByName('bUrl');
                                 if (prodId != "") {
                                     window.location.href = sUrlBack;
                                 }
                                 else {
                                     window.location.href = sUrlBack + '?qryStr=%7B%0D%0A%20%20"active_status"%3A%20"Y"%0D%0A%7D';
                                 }
                             });
                         }
                         else if (respone.result.Status == SysProcess.Duplicate) {
                             DialogWarning(DialogHeader.Warning, respone.result.Msg);
                         }
                         else {
                             DialogWarning(DialogHeader.Warning, respone.result.Msg);
                         }
                     },
                     error: AjaxCall.error,
                     complete: function (jqXHR, status) {//finaly
                         UnblockUI();
                         $("#PopupSave").modal('hide');
                     }
                 });
             }
             else {
                 DialogWarning(DialogHeader.Warning, "Interviewer (Evaluator) must “tick” the box for acknowledgement confidential information from candidate's previous/current employer will not be disclosed to us during the interview session.");
             }
            }
                 function SetAutocom(txtTarget) {
                        $("input[id$=" + txtTarget + "]").on("keyup", function () {
                            var newList = ko.toJS(viewModel);
                            if (newList.Id != undefined) {
                                newList.user_name = '';
                                newList.unit_name = '';
                                newList.user_id = '';
                                newList.user_rank = '';
                                BindData(newList);
                            }
                        });
                        $("input[id$=" + txtTarget + "]").autocomplete({
                            //disabled: true,
                            source: function (request, response) {
                                $.ajax({
                                    global: false,  // <-- this is the key!
                                    dataType: AjaxCall.dataType,
                                    type: AjaxCall.type,
                                    contentType: AjaxCall.contentType,
                                    url: '@Url.Action("UserAutoCompleteAll", "HCMMasterData")',
                        data: JSON.stringify({ SearchItem: request.term }),
                        success: function (data) {
                            UnblockUI();
                            response($.map(data, function (item) {
                                return {
                                    value: item.id,
                                    label: item.id + " : " + item.user_name ,
                                    user_id: item.user_id,
                                    user_no: item.id,
                                    user_name: item.user_name,
                                    unit_name: item.unit_name,
                                    user_rank: item.user_rank,
                                }
                            }));
                        }
                    });
                },
                        minLength: 1,
                        select: function (event, ui) {
                        var newList = ko.toJS(viewModel);
                        if (newList.Id != undefined) {
                            newList.user_name = ui.item.user_name;
                            newList.unit_name = ui.item.unit_name;
                            newList.user_id = ui.item.user_id;
                            newList.user_no = ui.item.user_no;
                            newList.user_rank = ui.item.user_rank;
                            BindData(newList);
                        }

                        }

                        });
            }
            function RollbackData() {
                $("#PopupRollback").modal();
            }
            function Approve() {
                $("#PopupApprove").modal();
            }
            function Rollback() {
                var IsPass = true;
                if (IsPass) {

                    BlockUI();
                    var Param = ko.toJS(viewModel);
                    $.ajax({
                        dataType: AjaxCall.dataType,
                        type: AjaxCall.type,
                        contentType: AjaxCall.contentType,
                        url: '@Url.Action("RollBackTIFForm", "Interview")',
                        data: JSON.stringify({ ItemData: Param }),
                        success: function (respone) {
                            if (respone.result.Status == SysProcess.SessionExpired) {
                                PopupLogin('@Url.Action("Index", "Home")');
                            } else if (respone.result.Status == SysProcess.Success) {
                                DialogSuccessOk(DialogHeader.Info, DialogMsg.SaveComplete, 'func', function () {
                                    var prodId = getParameterByName('bUrl');
                                    if (prodId != "") {
                                        window.location.href = sUrlBack;
                                    }
                                    else {
                                        window.location.href = sUrlBack + '?qryStr=%7B%0D%0A%20%20"active_status"%3A%20"Y"%0D%0A%7D';
                                    }
                                });
                            }
                            else if (respone.result.Status == SysProcess.Duplicate) {
                                DialogWarning(DialogHeader.Warning, respone.result.Msg);
                            }
                            else {
                                DialogWarning(DialogHeader.Warning, respone.result.Msg);
                            }
                        },
                        error: AjaxCall.error,
                        complete: function (jqXHR, status) {//finaly
                            UnblockUI();
                            $("#PopupRollback").modal('hide');
                        }
                    });
                }
            }
            function ApproveData() {
                var IsPass = true;
                if (IsPass) {

                    BlockUI();
                    var Param = ko.toJS(viewModel);
                    $.ajax({
                        dataType: AjaxCall.dataType,
                        type: AjaxCall.type,
                        contentType: AjaxCall.contentType,
                        url: '@Url.Action("ApproveData", "Interview")',
                        data: JSON.stringify({ ItemData: Param }),
                        success: function (respone) {
                            if (respone.result.Status == SysProcess.SessionExpired) {
                                PopupLogin('@Url.Action("Index", "Home")');
                            } else if (respone.result.Status == SysProcess.Success) {
                                DialogSuccessOk(DialogHeader.Info, DialogMsg.SaveComplete, 'func', function () {
                                    var prodId = getParameterByName('bUrl');
                                    if (prodId != "") {
                                        window.location.href = sUrlBack;
                                    }
                                    else {
                                        window.location.href = sUrlBack + '?qryStr=%7B%0D%0A%20%20"active_status"%3A%20"Y"%0D%0A%7D';
                                    }
                                });
                            }
                            else if (respone.result.Status == SysProcess.Duplicate) {
                                DialogWarning(DialogHeader.Warning, respone.result.Msg);
                            }
                            else {
                                DialogWarning(DialogHeader.Warning, respone.result.Msg);
                            }
                        },
                        error: AjaxCall.error,
                        complete: function (jqXHR, status) {//finaly
                            UnblockUI();
                            $("#PopupApprove").modal('hide');
                        }
                    });
                }
            }
            function Edit() {
                BlockUI();
                $("#btnConfirm").hide();
                setTimeout(function () {
                    $("#btnEditConfirm").removeClass("hide");
                    GetTextareaByID("txtcomment").prop("disabled", false);
                    GetSelectByID("ddlRank").prop("disabled", false);
                    GetSelectByID("ddlTIFStatus").prop("disabled", false);
                    $('textarea[id*=txtRemark]').prop("disabled", false);
                    $('select[id*=ddlRating]').prop("disabled", false);
                    $("#btnEdit").hide("hide");
                    UnblockUI();
                }, 300);

            }
        </script>
    }
}
